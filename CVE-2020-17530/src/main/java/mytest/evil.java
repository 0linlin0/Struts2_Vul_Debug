package mytest;

import org.apache.tomcat.InstanceManager;
import org.apache.tomcat.SimpleInstanceManager;

import javax.naming.NamingException;
import java.lang.reflect.InvocationTargetException;

/**
 * @auther Skay
 * @date 2020/12/23 16:21
 * @description
 */
public class evil implements evil_test {
    public evil(){

    }

    public Object newInstance(Class<?> clazz) throws IllegalAccessException, InvocationTargetException, NamingException, InstantiationException, NoSuchMethodException {
        return this.prepareInstance(clazz.getConstructor().newInstance());
    }

    public Object newInstance(String className) throws IllegalAccessException, InvocationTargetException, NamingException, InstantiationException, ClassNotFoundException, NoSuchMethodException {
        Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(className);
        return this.prepareInstance(clazz.getConstructor().newInstance());
    }

    public Object newInstance(String fqcn, ClassLoader classLoader) throws IllegalAccessException, InvocationTargetException, NamingException, InstantiationException, ClassNotFoundException, NoSuchMethodException {
        Class<?> clazz = classLoader.loadClass(fqcn);
        return this.prepareInstance(clazz.getConstructor().newInstance());
    }

    public void newInstance(Object o) throws IllegalAccessException, InvocationTargetException, NamingException {
    }

    public void destroyInstance(Object o) throws IllegalAccessException, InvocationTargetException {
    }

    private Object prepareInstance(Object o) {
        return o;
    }
}
